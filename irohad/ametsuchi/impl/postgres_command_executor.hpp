/**
 * Copyright Soramitsu Co., Ltd. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

#ifndef IROHA_POSTGRES_COMMAND_EXECUTOR_HPP
#define IROHA_POSTGRES_COMMAND_EXECUTOR_HPP

#include "ametsuchi/command_executor.hpp"

#include "ametsuchi/impl/postgres_wsv_common.hpp"

namespace iroha {
  namespace ametsuchi {

    class PostgresCommandExecutor : public CommandExecutor {
     public:
      explicit PostgresCommandExecutor(soci::session &transaction);

      void setCreatorAccountId(
          const shared_model::interface::types::AccountIdType
              &creator_account_id) override;

      CommandResult operator()(
          const shared_model::interface::AddAssetQuantity &command) override;

      CommandResult operator()(
          const shared_model::interface::AddPeer &command) override;

      CommandResult operator()(
          const shared_model::interface::AddSignatory &command) override;

      CommandResult operator()(
          const shared_model::interface::AppendRole &command) override;

      CommandResult operator()(
          const shared_model::interface::CreateAccount &command) override;

      CommandResult operator()(
          const shared_model::interface::CreateAsset &command) override;

      CommandResult operator()(
          const shared_model::interface::CreateDomain &command) override;

      CommandResult operator()(
          const shared_model::interface::CreateRole &command) override;

      CommandResult operator()(
          const shared_model::interface::DetachRole &command) override;

      CommandResult operator()(
          const shared_model::interface::GrantPermission &command) override;

      CommandResult operator()(
          const shared_model::interface::RemoveSignatory &command) override;

      CommandResult operator()(
          const shared_model::interface::RevokePermission &command) override;

      CommandResult operator()(
          const shared_model::interface::SetAccountDetail &command) override;

      CommandResult operator()(
          const shared_model::interface::SetQuorum &command) override;

      CommandResult operator()(
          const shared_model::interface::SubtractAssetQuantity &command)
          override;

      CommandResult operator()(
          const shared_model::interface::TransferAsset &command) override;

     private:
      soci::session &sql_;

      shared_model::interface::types::AccountIdType creator_account_id_;

      static expected::Error<CommandError> makeCommandError(
          const std::string &error_message,
          const std::string &command_name) noexcept {
        return expected::makeError(CommandError{command_name, error_message});
      }

      /**
       * Transforms result which contains pqxx to CommandResult,
       * which will have error message generated by error_generator
       * appended to error received from given result
       * @param result which can be received by calling execute_
       * @param error_generator function which must generate error message
       * to be used as a return error.
       * Function is passed instead of string to avoid overhead of string
       * construction in successful case.
       * @return CommandResult with combined error message
       * in case of result contains error
       */
      template <typename Function>
      CommandResult makeCommandResult(
          soci::statement &st,
          std::string command_name,
          Function &&error_generator) const noexcept {
        st.define_and_bind();
        try {
          st.execute(true);
        } catch (std::exception &e) {
          return makeCommandError(error_generator() + "\n" + e.what(),
                                  command_name);
        }
        return {};
      }

      /**
       * Transforms result which contains pqxx to CommandResult,
       * which will have error message generated by error_generator
       * appended to error received from given result
       * @param result which can be received by calling execute_
       * @param error_generator functions which must generate error message
       * to be used as a return error.
       * Functions are passed instead of string to avoid overhead of string
       * construction in successful case.
       * @return CommandResult with combined error message
       * in case of result contains error
       */
      CommandResult makeCommandResultByValue(
          soci::statement &st,
          std::string command_name,
          std::vector<std::function<std::string()>> &error_generator) const noexcept {
        uint32_t result;
        st.exchange(soci::into(result));
        st.define_and_bind();
        try {
          st.execute(true);
          for (size_t i = 0; i < error_generator.size(); i++) {
            // Since success code is 0 and error codes starts with 1
            if (result == i + 1) {
              return makeCommandError(error_generator[i](), command_name);
            }
          }
          return {};
        } catch (std::exception &e) {
          return makeCommandError(e.what(), command_name);
        }
      }
    };
  }  // namespace ametsuchi
}  // namespace iroha

#endif  // IROHA_POSTGRES_COMMAND_EXECUTOR_HPP
